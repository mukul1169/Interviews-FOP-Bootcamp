
import java.util.*;
 class ImplementQueue{
  
 Stack<Integer> s1 = new Stack<Integer>();
 Stack<Integer> s2=new Stack<>();
//The basic push and pop method of a stack are used to create enqueue and dequeue function of a queue
 public void enQueue(int newData){

 //Write your code here
 s1.push(newData);
 }
 
   // Function to deQueue an item from queue 
  
 public void deQueue(){
//Write your code here 
   if(s1.size()==0 && s2.size()==0)
   {
       System.out.println("no elements left");
   }
   else
   {
       if(s2.isEmpty())
       {
         int n=s1.size();
         while(n>0)
         {
           s2.push(s1.pop());  n--;
         }
       }
         System.out.println(s2.pop());
   }
   
} 

}

public class Source { 
    
 public static void main(String[] args) {
     
   Scanner in=new Scanner(System.in);
   ImplementQueue obj = new ImplementQueue();
   int n=in.nextInt();
   for(int i=0;i<n;i++) {
    obj.enQueue(in.nextInt());   
       
   }  
  obj.deQueue();
  obj.deQueue();
  obj.deQueue();
 }
}



