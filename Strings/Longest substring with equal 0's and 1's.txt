import java.util.*;

public class Source {
   public static void main(String args[]) {
       Scanner s = new Scanner(System.in);
       String str = s.nextLine();
       longestSubString(str);
   }

   // Method to find the longest substring with an equal number of 1s and 0s.
   static void longestSubString(String str) {
       int startIndex = -1, endIndex = -1, currentLength = 0, maxLength = 0, oneCount = 0, zeroCount = 0;
       // HashMap to store difference between the number of ones and the number of zeros as the key and
       // the index of the first occurrence of that difference as the value.
       HashMap<Integer, Integer> map = new HashMap<>();
       map.put(0, -1);
       for (int i = 0; i < str.length(); i++) {
           if (str.charAt(i) == '1')
               oneCount++;
           else
               zeroCount++;
           // If the current difference is already occurred
           if (map.containsKey(oneCount - zeroCount)) {
               currentLength = i - map.get(oneCount - zeroCount);
               if (currentLength > maxLength) {
                   startIndex = map.get(oneCount - zeroCount) + 1;
                   endIndex = i;
                   maxLength = currentLength;
               }
           }
           // If the current difference is occurring for the first time, map the current index i to the current difference
           else
               map.put(oneCount - zeroCount, i);
       }
       if (maxLength == 0)
           System.out.println("No such substring");
       else
           System.out.println(str.substring(startIndex, endIndex + 1));
   }
}
